/*Look-and-Say Sequence

Find the n’th term in Look-and-say (Or Count and Say) Sequence. The look-and-say sequence is the sequence of the below integers:
1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …

The first term is "1"
Second term is "11", generated by reading first term as "One 1"
(There is one 1 in previous term)
Third term is "21", generated by reading second term as "Two 1"
Fourth term is "1211", generated by reading third term as "One 2 One 1"
and so on

How to find n’th term?
Example:

Input: n = 3
Output: 21
Input: n = 5
Output: 111221*/

function lookNTell(n) {
    if (n === 1){
        return "1"
    }
    if (n === 2) {
        return "11"
    }
    // Here we could implement some ckind of cache that saves the results, so that
    // the amount of iterations of the for cycles gets drastically reduced for higher
    // inputs.
    let num = "11" //Here we would search on the cache if the number provided 'n' has already been calculated, or n-1 has been calculated

    // This would mean a reafactor on both for cycle down here, because we would only iterate for n-1
    for(let i=3;i<=n;i++){
        let numLen = num.length
        let matchCount = 1
        let result = ""
        for (let j=1;j<=numLen;j++){
            if (num[j] != num[j-1]){
                result += matchCount
                result += num[j-1]
                matchCount = 1
                
            } else {
                matchCount++
            }
        }
        num = result
    }
    return num
}

console.log("Sequence 3: ",lookNTell(3))
console.log("Sequence 4: ",lookNTell(4))
console.log("Sequence 5: ",lookNTell(5))
console.log("Sequence 6: ",lookNTell(6))
console.log("Sequence 7: ",lookNTell(7))
console.log("Sequence 8: ",lookNTell(8))